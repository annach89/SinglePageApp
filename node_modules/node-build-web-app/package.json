{
  "name": "node-build-web-app",
  "description": "Development Build based on ModernWebDevBuild.",
  "version": "0.6.9",
  "author": {
    "name": "Mark Small",
    "email": "marksmall@gmx.com"
  },
  "contributors": [],
  "homepage": "https://github.com/marksmall/node-build-web-app",
  "private": false,
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/marksmall/node-build-web-app/issues"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:marksmall/node-build-web-app.git"
  },
  "keywords": [
    "web",
    "frontend",
    "build",
    "gulp",
    "html5",
    "typescript",
    "es6",
    "build",
    "es2015",
    "sass"
  ],
  "devDependencies": {
    "jasmine": "2.4.x",
    "karma-jasmine": "0.3.x"
  },
  "dependencies": {
    "autoprefixer": "6.3.x",
    "babel-core": "6.7.x",
    "babel-plugin-transform-es2015-modules-commonjs": "6.7.x",
    "babel-preset-es2015": "6.6.x",
    "babel-runtime": "6.6.x",
    "browser-sync": "2.11.x",
    "connect-history-api-fallback": "1.2.0",
    "del": "2.2.x",
    "event-stream": "3.3.x",
    "gulp": "3.9.x",
    "gulp-autoprefixer": "3.1.x",
    "gulp-babel": "6.1.x",
    "gulp-cache": "0.4.x",
    "gulp-changed": "1.3.x",
    "gulp-concat": "2.6.x",
    "gulp-cssimport": "3.0.x",
    "gulp-csso": "2.0.x",
    "gulp-debug": "2.1.x",
    "gulp-flatten": "0.2.x",
    "gulp-help": "1.6.x",
    "gulp-html-replace": "1.5.x",
    "gulp-if": "2.0.x",
    "gulp-imagemin": "2.4.x",
    "gulp-inject": "4.0.x",
    "gulp-inline-source": "2.1.x",
    "gulp-jscs": "3.0.x",
    "gulp-jscs-stylish": "1.3.x",
    "gulp-jshint": "2.0.x",
    "gulp-minify-css": "1.2.x",
    "gulp-minify-html": "1.0.x",
    "gulp-nice-package": "1.1.x",
    "gulp-notify": "2.2.x",
    "gulp-plumber": "1.1.x",
    "gulp-rename": "1.2.x",
    "gulp-replace": "0.5.x",
    "gulp-sass": "2.2.x",
    "gulp-sass-lint": "^1.1.1",
    "gulp-size": "2.1.x",
    "gulp-sourcemaps": "1.6.x",
    "gulp-strip-debug": "1.1.x",
    "gulp-tslint": "4.3.x",
    "gulp-typescript": "2.12.x",
    "gulp-uglify": "1.5.x",
    "gulp-uncss": "1.0.x",
    "gulp-util": "3.0.x",
    "http-proxy-middleware": "^0.13.0",
    "jshint": "^2.9.1",
    "jshint-stylish": "2.1.x",
    "jspm": "0.16.x",
    "karma": "0.13.x",
    "karma-chrome-launcher": "0.2.x",
    "karma-firefox-launcher": "0.1.7",
    "karma-ie-launcher": "0.2.0",
    "karma-jspm": "2.1.x",
    "karma-junit-reporter": "0.4.x",
    "karma-phantomjs-launcher": "1.0.x",
    "karma-spec-reporter": "0.0.x",
    "karma-systemjs": "0.13.x",
    "nodemon": "1.9.x",
    "node-sass": "3.4.x",
    "opn": "4.0.x",
    "phantomjs-polyfill": "0.0.x",
    "phantomjs-prebuilt": "^2.1.7",
    "require-dir": "0.3.x",
    "run-sequence": "1.1.x",
    "systemjs-builder": "0.15.x",
    "tslint": "3.7.x",
    "typescript": "1.8.x"
  },
  "peerDependencies": {
    "babel-core": "6.7.x",
    "gulp": "3.9.x"
  },
  "engines": {
    "node": ">=4.4.2",
    "npm": ">=3.8.6"
  },
  "main": "dist/index.js",
  "files": [
    "dist"
  ],
  "directories": {
    "lib": "./dist"
  },
  "scripts": {
    "clean": "gulp clean",
    "compile": "gulp",
    "build": "npm run compile && gulp test-unit",
    "test": "gulp prepare-test-unit && gulp test-unit",
    "update": "npm install --no-optional",
    "outdated": "npm outdated",
    "help": "gulp help",
    "setup": "npm install --no-optional",
    "prepublish": "npm run build"
  },
  "readme": "# Web Dev Build System\n\n[![NPM version](https://img.shields.io/badge/npm-3.8.6-blue.svg)](https://www.npmjs.com/package/node-build-web-app)\n[![Downloads](https://img.shields.io/npm/dm/node-build-web-app.svg)](https://www.npmjs.com/package/node-build-web-app)\n[![GitHub issues](https://img.shields.io/github/issues/marksmall/node-build-web-app.svg)](https://github.com/marksmall/node-build-web-app/issues)\n[![Build Status](https://travis-ci.org/marksmall/node-build-web-app.svg?branch=master)](https://travis-ci.org/marksmall/node-build-web-app)\n[![Dependency Status](https://david-dm.org/marksmall/node-build-web-app.svg)](https://david-dm.org/marksmall/node-build-web-app)\n[![devDependency Status](https://david-dm.org/marksmall/node-build-web-app/dev-status.svg)](https://david-dm.org/marksmall/node-build-web-app#info=devDependencies)\n[![Code Climate](https://codeclimate.com/github/marksmall/node-build-web-app/badges/gpa.svg)](https://codeclimate.com/github/marksmall/node-build-web-app)\n[![Test Coverage](https://codeclimate.com/github/marksmall/node-build-web-app/badges/coverage.svg)](https://codeclimate.com/github/marksmall/node-build-web-app/coverage)\n[![Issue Count](https://codeclimate.com/github/marksmall/node-build-web-app/badges/issue_count.svg)](https://codeclimate.com/github/marksmall/node-build-web-app)\n[![Gitter](https://img.shields.io/badge/gitter-join%20chat-green.svg?style=flat)](https://gitter.im/marksmall/node-build-web-app)\n[![GitHub license](https://img.shields.io/badge/license-MIT-blue.svg)](https://raw.githubusercontent.com/marksmall/node-build-web-app/master/LICENSE.MD)\n\n\n## About\nA Build System for Angular 2 web app development using the Gulp build system. This module forked from\n[Modern Web Dev Build](https://www.npmjs.com/package/modern-web-dev-build). All kudos goes to Sebastien, I have just\nadded features I tend to use. You can see a [seed](https://github.com/marksmall/angular2-jspm-seed) project using this\nBuild System.\n\n\n## Added Features\n\n### Proxy API Server\n\nThis was the primary feature I felt was missing, maybe I missed something and this isn't necessary but it is how I\ndevelop, so I forked the repository. The proxy server provides stubbed API calls to the back-end server.\nThe proxy middleware is provided by [http-proxy-middleware](https://www.npmjs.com/package/http-proxy-middleware)\nand is configured and developed by the application project, not this package. I tend to use [express](https://www.npmjs.com/package/express), but that isn't crucial. To setup\nthe proxy, add configuration to the **options** object in the project **gulpfile** e.g.\n\n```\noptions.proxy = {\n\tapi: '/api',\n\ttarget: 'http://localhost',\n\tport: 8000\n};\n```\n\nThe *api* is the URL path to listen on e.g. `/api/init`, `/api/login` etc. The *target* and the *port* identify where\nto forward requests to. So, requests to `http://localhost:8000/api/login` would be sent to the proxy and the\nresponse from it returned to the application. This enables us to develop the front-end separately from the back-end\nserver, all we have to do is agree an API.\n\nThe proxy server itself is defined by the project using this Build System but if the above configuration exists, then\nthe proxy task must also be implemented, see an example of of such a [task](examples/tasks/proxy.js)\n\n\n### Configure App Source Folder\n\nAdded ability to configure where the application code exists, this was previously hard-coded to the project root but\nthat seemed limiting. To override the location add to the gulpfile e.g.\n\n```\noptions.folders = {};\noptions.folders.app = './src/main/app';\n```\n\n### SASS Linting\n\nThis seemed a very basic omission, I used [gulp-sass-lint](https://www.npmjs.com/package/gulp-sass-lint) NPM package\nto provide the functionality, it is up to the application whether to override the default options or not by providing\na *sass-lint.yml* file, the structure of which you can learn about at [sass-lint](https://www.npmjs.com/package/sass-lint).\n\n## Features from Modern Web Dev Build\n\n* ES2015 and TypeScript support\n* built-in HTTP server with live reloading & cross-device synchronization (BrowserSync)\n  * configured to support CORS\n* awesome developer experience with a change detection mechanism that automagically:\n  * transpiles TypeScript > ESx w/ sourcemaps (you choose the target version)\n  * transpiles ES2015 > ESx w/ sourcemaps  (you choose the target version)\n  * transpiles SASS > CSS w/ sourcemaps\n  * checks JavaScript/TypeScript code quality/style and report on the console (without breaking the build)\n  * ...\n* production bundle creation support with:\n  * CSS bundle creation\n  * CSS optimization & minification\n  * JS bundle creation\n  * JS minification\n  * HTML minification\n  * images optimization\n* ...\n\nCheck out the [change log](CHANGELOG.MD)\n\n\n## Embedded choices\nAs state above, some important technology choices are clearly embedded with this project. Here's a rundown of those choices:\n* [TypeScript](http://www.typescriptlang.org/) and ES2015 (although the final output is ES5 for wider compatibility)\n* [SystemJS](https://github.com/systemjs/systemjs): module loader\n* [JSPM](http://jspm.io/) to manage your application dependencies (through jspm.conf.js)\n  * JSPM support can be disabled if you wish\n* [Karma](http://karma-runner.github.io/) to run tests\n* [SASS](http://sass-lang.com/): who doesn't want variables and mixins?\n* component based code & assets organization (Angular friendly)\n* [JSCS](http://jscs.info/) and included code style rules\n* [JSHint](http://jshint.com/) and included code quality rules\n* [TSLint](https://github.com/palantir/tslint) and included code quality/style rules\n* [BrowserSync](http://www.browsersync.io/) development Web Server\n\n## Upgrade\nCheck out the [upgrade](UPGRADE.md) page\n\n## Installation\n\n### General Pre-requisites\n\nBefore you install the build, you need to install some dependencies globally:\n* `npm install --global gulp`\n\n### Add to Projects\nFirst configure the required dependencies in your package.json file:\n* add Build System to your devDependencies: `npm install node-build-web-app --save-dev`\n* execute `npm install --no-optional`\n\nYou should get warnings about missing peer dependencies. Those are dependencies that are required by the build but that\nyou should add to your own project, install these one by one.\n\nFor now the required peer dependencies are as follows:\n* babel-core\n* gulp\n* jspm\n* nodemon (required by recommended npm scripts)\n* typescript\n\nNext, check the minimal require file contents below!\n\n## Required folder structure and files\n\nThe build tries to provide a flexible structure, but given the technical choices that are embedded, some rules must be\nrespected and the build expects certain folders and files to be present. In the future we'll see if we can make this\nmore configurable.\n\n### Mandatory folder structure & files\nHere's an overview of the structure imposed by this Build System.\n\nPlease make sure to check the file organization section for more background about the organization and usage guidelines.\n\n* project root\n  * app: folder containing all the files of the application, defaults root, but is configurable, see above.\n\t* components: folder containing components of your application (e.g., login, menu, ...); basically reusable pieces\n\t* core: folder containing at least the entrypoint of your application\n\t  * commons: folder containing common reusable code (e.g., base utilities)\n\t  * services: folder containing generic services (e.g., for local storage)\n\t  * boot.ts: the entrypoint of your application\n\t  * app.ts: the application root\n\t* fonts: folder containing fonts of your application (if any)\n\t* images: folder for image assets\n\t* pages: folder for full-blown pages of your application\n\t* scripts: folder for scripts\n\t* styles: folder for the main stylesheets\n\t  * main.scss: file used to import all application-specific stylesheets\n\t  * vendor.scss: file used to import all third-party stylesheets\n\t  * note that the goal isn't to put ALL your stylesheets in there, basically just the entrypoints and the generic parts (e.g., variables, mixins, responsive styles, ...)\n\t* index.html: the entrypoint of your application\n  * .babelrc: Babel configuration file\n  * .jscsrc: JSCS rule set to use while checking JavaScript code style\n\t* reference: http://jscs.info/overview\n  * .jshintrc: JSHint rule set to use while checking JavaScript code quality\n\t* reference: http://jshint.com/docs/\n\t* note that the file is actually optional but indeed recommended!\n  * .jshintignore: files and folders to ignore while checking JavaScript code quality\n  * gulpfile.babel.js: gulp configuration file\n  * jspm.conf.js: SystemJS/JSPM configuration file\n\t* can have another name if you do not use JSPM (see options)\n  * karma.conf.js: Karma configuration file (configuration of the test runner)\n  * package.json: NPM configuration file (also used by JSPM)\n  * tsconfig.json: TypeScript compiler configuration\n  * tslint.json: TypeScript code quality/style rules\n\n### Minimal (build-related) required file contents\n\nAlthough we want to limit this list as much as possible, for everything to build successfully, some files need specific\ncontents:\n\n#### .babelrc\n```\n{\n\t\"presets\": [\"es2015\"],\n\t\"plugins\": [\"transform-es2015-modules-commonjs\"],\n\t\"comments\": false\n}\n```\n\nWith the configuration above, Babel will transpile ES2015 code to ES5 commonjs.\nFor that configuration to work, the following devDependencies must also be added to your project:\n\n```\n\"babel-plugin-transform-es2015-modules-commonjs\": \"6.3.x\",\n\"babel-preset-es2015\": \"6.3.x\",\n```\n\n#### gulpfile.babel.js\nIn order to use this Build System, your gulpfile must at least contain the following.\nThe code below uses ES2015 (via gulpfile.babel.js), but if you're old school you can also simply use a gulpfile.js with\nES5.\n\nNote that the build tasks provided are transpiled to ES5 before being published\n\n```\n\"use strict\";\n\nimport gulp from \"gulp\";\n\nimport build from \"node-build-web-app\";\nlet options = undefined; // no options are supported yet\n\n//options.minifyHTML = false;\n//...\n\nbuild.registerTasks(gulp, options);\n```\n\nWith the above, all the gulp tasks provided will be available to you. See a [full example](examples/gulpfile.babel.js)\n\n#### .jscsrc\nValid configuration\n\n#### .jshintrc\nAt least the following:\n\n```\nnode_modules/**/*\njspm_packages/**/*\njspm.conf.js\ndist/**/*\n.tmp/**/*\n```\n\n#### jspm.conf.js\nThe SystemJS/JSPM configuration file plays a very important role;\n* it is where all your actual application dependencies are to be defined\n* it is where you can define your own 'paths', allowing you to load modules of your application easily without having\n  to specify relative paths (i.e., create aliases for paths).\n\nIf you choose to use the default JSPM support, then you can add dependencies to your project using `jspm install`;\ncheck the [official JSPM documentation](http://jspm.io/) to know more about how to install packages.\n\nWith the help of this configuration file, SystemJS will be able to load your own application modules and well as third\nparty dependencies. In your code, you'll be able to use ES2015 style (e.g., `import {x} from \"y\"`). In order for this\nto work, you'll also need to load SystemJS and the SystemJS/JSPM configuration file in your index.html (more on this\nafterwards).\n\nIf you have disabled the use of JSPM by the build then you can rename that file if you wish and inform the build (see\nthe options), BUT make sure that any reference in the various configuration files is updated (e.g., karma configuration,\njshint configuration, etc). Only rename it if it is really really useful to you :)\n\nHere's an example:\n```\nSystem.config({\n  defaultJSExtensions: true,\n  transpiler: false,\n  paths: {\n\t\"github:*\": \"jspm_packages/github/*\",\n\t\"npm:*\": \"jspm_packages/npm/*\",\n\t\"core/*\": \"./.tmp/core/*\",\n\t\"pages/*\": \"./.tmp/pages/*\"\n  }\n});\n```\n\nIn the above:\n* defaultJSExtensions: is mandatory so that extensions don't have to be specified when importing modules\n* transpiler: is set to false because we don't use in-browser transpilation\n* paths\n  * core/*, pages/* allow you to import modules from different parts of your codebase without having to specify\n   relative or absolute paths. This is covered in the folder structure section above.\n  * you can rename those if you wish\n\n#### package.json\nIn addition to the dependencies listed previously, you also need to have the following in your package.json file,\nassuming that you want to use JSPM:\n\n```\n  \"jspm\": {\n\t\"directories\": {},\n\t\"configFile\": \"jspm.conf.js\",\n\t\"dependencies\": {\n\t},\n\t\"devDependencies: {\n\t}\n  }\n```\n\nThis is where you let JSPM know where to save the information about dependencies you install. This is also where you\ncan easily add new dependencies; for example: `\"angular2\": \"npm:angular2@^2.0.0-beta.1\",`. Once a dependency is added\nthere, you can invoke `jspm install` to get the files and transitive dependencies installed and get an updated\njspm.conf.js file.\n\n#### tsconfig.json\nGiven that TypeScript is one of the (currently) embedded choices of this project, the TypeScript configuration file is\nmandatory.\n\nThe tsconfig.json file contains:\n* the configuration of the TypeScript compiler\n* TypeScript code style rules\n* the list of files/folders to include/exclude\n\nHere's is the minimal required contents. Note that the outDir value is important as it tells the compiler where to\nwrite the generated code! Make sure that you also DO have the rootDir property defined and pointing to \"./app\",\notherwise the build will fail (more precisely, `npm run serve` will fail).\n\nThe build depends on the presence of those settings.\n\n```\n{\n\t\"version\": \"1.7.3\",\n\t\"compilerOptions\": {\n\t\t\"target\": \"es5\",\n\t\t\"module\": \"commonjs\",\n\t\t\"declaration\": false,\n\t\t\"noImplicitAny\": true,\n\t\t\"suppressImplicitAnyIndexErrors\": true,\n\t\t\"removeComments\": false,\n\t\t\"emitDecoratorMetadata\": true,\n\t\t\"experimentalDecorators\": true,\n\t\t\"noEmitOnError\": false,\n\t\t\"preserveConstEnums\": true,\n\t\t\"inlineSources\": false,\n\t\t\"sourceMap\": false,\n\t\t\"outDir\": \"./.tmp\",\n\t\t\"rootDir\": \"./app\",\n\t\t\"moduleResolution\": \"node\",\n\t\t\"listFiles\": false\n\t},\n\t\"exclude\": [\n\t\t\"node_modules\",\n\t\t\"jspm_packages\",\n\t\t\"typings/browser\",\n\t\t\"typings/browser.d.ts\"\n\t]\n}\n```\n\nHere's a more complete example including code style rules:\n\n```\n{\n\t\"version\": \"1.7.3\",\n\t\"compilerOptions\": {\n\t\t\"target\": \"es5\",\n\t\t\"module\": \"commonjs\",\n\t\t\"declaration\": false,\n\t\t\"noImplicitAny\": true,\n\t\t\"suppressImplicitAnyIndexErrors\": true,\n\t\t\"removeComments\": false,\n\t\t\"emitDecoratorMetadata\": true,\n\t\t\"experimentalDecorators\": true,\n\t\t\"noEmitOnError\": false,\n\t\t\"preserveConstEnums\": true,\n\t\t\"inlineSources\": false,\n\t\t\"sourceMap\": false,\n\t\t\"outDir\": \"./.tmp\",\n\t\t\"rootDir\": \"./app\",\n\t\t\"moduleResolution\": \"node\",\n\t\t\"listFiles\": false\n\t},\n\t\"formatCodeOptions\": {\n\t\t\"indentSize\": 2,\n\t\t\"tabSize\": 4,\n\t\t\"newLineCharacter\": \"\\r\\n\",\n\t\t\"convertTabsToSpaces\": false,\n\t\t\"insertSpaceAfterCommaDelimiter\": true,\n\t\t\"insertSpaceAfterSemicolonInForStatements\": true,\n\t\t\"insertSpaceBeforeAndAfterBinaryOperators\": true,\n\t\t\"insertSpaceAfterKeywordsInControlFlowStatements\": true,\n\t\t\"insertSpaceAfterFunctionKeywordForAnonymousFunctions\": false,\n\t\t\"insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis\": false,\n\t\t\"placeOpenBraceOnNewLineForFunctions\": false,\n\t\t\"placeOpenBraceOnNewLineForControlBlocks\": false\n\t},\n\t\"exclude\": [\n\t\t\"node_modules\",\n\t\t\"jspm_packages\",\n\t\t\"typings/browser\",\n\t\t\"typings/browser.d.ts\"\n\t]\n}\n```\n\nNote the exclusion that we have made, all of which are relevant and there to avoid known issues (e.g.,\nhttps://github.com/typings/discussions/issues/6 if you are using typings).\n\n#### tslint.json\ntslint.json is the configuration file for [TSLint](https://github.com/palantir/tslint).\n\nAlthough it is not strictly mandatory (the build will work without this file), we heavily recommend you to use it as it\nis very useful to ensure a minimal code quality level and can help you avoid common mistakes and unnecessary complicated\ncode:\n\nHere's an example:\n```\n{\n  \"rules\": {\n\t\"class-name\": true,\n\t\"curly\": true,\n\t\"eofline\": true,\n\t\"forin\": true,\n\t\"indent\": [false, \"tabs\"],\n\t\"interface-name\": false,\n\t\"label-position\": true,\n\t\"label-undefined\": true,\n\t\"max-line-length\": false,\n\t\"no-any\": false,\n\t\"no-arg\": true,\n\t\"no-bitwise\": true,\n\t\"no-console\": [false,\n\t  \"debug\",\n\t  \"info\",\n\t  \"time\",\n\t  \"timeEnd\",\n\t  \"trace\"\n\t],\n\t\"no-construct\": true,\n\t\"no-debugger\": true,\n\t\"no-duplicate-key\": true,\n\t\"no-duplicate-variable\": true,\n\t\"no-empty\": true,\n\t\"no-eval\": true,\n\t\"no-imports\": true,\n\t\"no-string-literal\": false,\n\t\"no-trailing-comma\": true,\n\t\"no-unused-variable\": false,\n\t\"no-unreachable\": true,\n\t\"no-use-before-declare\": null,\n\t\"one-line\": [true,\n\t  \"check-open-brace\",\n\t  \"check-catch\",\n\t  \"check-else\",\n\t  \"check-whitespace\"\n\t],\n\t\"quotemark\": [true, \"double\"],\n\t\"radix\": true,\n\t\"semicolon\": true,\n\t\"triple-equals\": [true, \"allow-null-check\"],\n\t\"variable-name\": false,\n\t\"no-trailing-whitespace\": true,\n\t\"whitespace\": [false,\n\t  \"check-branch\",\n\t  \"check-decl\",\n\t  \"check-operator\",\n\t  \"check-separator\",\n\t  \"check-type\",\n\t  \"check-typecast\"\n\t]\n  }\n}\n```\n\n#### karma.conf.js\nKarma loads his configuration from karma.conf.js. That file contains everything that Karma needs to know to execute\nyour unit tests.\n\nHere's an example configuration file that uses Jasmine. Note that the main Karma dependencies including PhantomJS are\nincluded in the build. You only need to add a dependency to jasmine, karma-jasmine and karma-jspm for the following to\nwork.\n\nIf you choose not to use JSPM, then you can use karma-systemjs instead: https://www.npmjs.com/package/karma-systemjs\n\nExample:\n```\n// Karma configuration\n// reference: http://karma-runner.github.io/0.13/config/configuration-file.html\n\nmodule.exports = function (config) {\n\tconfig.set({\n\n\t\t// base path that will be used to resolve all patterns (eg. files, exclude)\n\t\t//basePath: \".tmp/\",\n\n\t\tplugins: [\n\t\t\t\"karma-jspm\",\n\t\t\t\"karma-jasmine\",\n\t\t\t\"karma-phantomjs-launcher\",\n\t\t\t\"karma-chrome-launcher\",\n\t\t\t\"karma-firefox-launcher\",\n\t\t\t\"karma-ie-launcher\",\n\t\t\t\"karma-junit-reporter\",\n\t\t\t\"karma-spec-reporter\"\n\t\t],\n\n\t\t// frameworks to use\n\t\t// available frameworks: https://npmjs.org/browse/keyword/karma-adapter\n\t\tframeworks: [\n\t\t\t\"jspm\",\n\t\t\t\"jasmine\"\n\t\t],\n\n\t\t// list of files / patterns to load in the browser (loaded before SystemJS)\n\t\tfiles: [],\n\n\t\t// list of files to exclude\n\t\texclude: [],\n\n\t\t// list of paths mappings\n\t\t// can be used to map paths served by the Karma web server to /base/ content\n\t\t// knowing that /base corresponds to the project root folder (i.e., where this config file is located)\n\t\tproxies: {\n\t\t\t\"/.tmp\": \"/base/.tmp\" // without this, karma-jspm can't load the files\n\t\t},\n\n\t\t// preprocess matching files before serving them to the browser\n\t\t// available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor\n\t\tpreprocessors: {},\n\n\t\t// test results reporter to use\n\t\t// possible values: 'dots', 'progress', 'spec', 'junit'\n\t\t// available reporters: https://npmjs.org/browse/keyword/karma-reporter\n\t\t// https://www.npmjs.com/package/karma-junit-reporter\n\t\t// https://www.npmjs.com/package/karma-spec-reporter\n\t\treporters: [\"spec\"],\n\n\t\t// web server port\n\t\tport: 9876,\n\n\t\t// enable / disable colors in the output (reporters and logs)\n\t\tcolors: true,\n\n\t\t// level of logging\n\t\t// possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG\n\t\tlogLevel: config.LOG_INFO,\n\n\t\t// enable / disable watching file and executing tests whenever any file changes\n\t\tautoWatch: true,\n\n\t\t// start these browsers\n\t\t// available browser launchers: https://npmjs.org/browse/keyword/karma-launcher\n\t\tbrowsers: [\n\t\t\t\"PhantomJS\"\n\t\t\t//\"Chrome\",\n\t\t\t//\"Firefox\",\n\t\t\t//\"PhantomJS\",\n\t\t\t//\"IE\"\n\t\t],\n\n\t\t// Continuous Integration mode\n\t\t// if true, Karma captures browsers, runs the tests and exits\n\t\tsingleRun: false,\n\n\t\tjunitReporter: {\n\t\t\toutputFile: \"target/reports/tests-unit/unit.xml\",\n\t\t\tsuite: \"unit\"\n\t\t},\n\n\t\t// doc: https://www.npmjs.com/package/karma-jspm\n\t\t// reference config: https://github.com/gunnarlium/babel-jspm-karma-jasmine-istanbul\n\t\tjspm: {\n\t\t\t// Path to your SystemJS/JSPM configuration file\n\t\t\tconfig: \"jspm.conf.js\",\n\n\t\t\t// Where to find jspm packages\n\t\t\t//packages: \"jspm_packages\",\n\n\t\t\t// One use case for this is to only put test specs in loadFiles, and jspm will only load the src files when and if the test files require them.\n\t\t\tloadFiles: [\n\t\t\t\t// load all tests\n\t\t\t\t\".tmp/*.spec.js\", // in case there are tests in the root folder\n\t\t\t\t\".tmp/**/*.spec.js\"\n\t\t\t],\n\n\t\t\t// Make additional files/a file pattern available for jspm to load, but not load it right away.\n\t\t\tserveFiles: [\n\t\t\t\t\".tmp/**/!(*.spec).js\" // make sure that all files are available\n\t\t\t],\n\n\t\t\t// SystemJS configuration specifically for tests, added after your config file.\n\t\t\t// Good for adding test libraries and mock modules\n\t\t\tpaths: {}\n\t\t}\n\t});\n};\n```\n\nDev dependencies to add for the above Karma configuration:\n```\n\t\"jasmine\": \"...\",\n\t\"karma-jasmine\": \"...\",\n\t\"karma-jspm\": \"...\"\n```\n\n### Minimal (application-specific) required file contents\nAlthough we want to limit this list as much as possible, for everything to build successfully, some files need specific\ncontents:\n\n#### core/app.ts\nThis should be the top element of your application. This should be loaded by core/boot.ts (see below).\n\n```\n\"use strict\";\n\nexport class App {\n\t...\n\tconstructor(){\n\t\tconsole.log(\"Hello world!\");\n\t}\n}\n```\n\n#### core/boot.ts\nThe boot.ts file is the entrypoint of your application. Currently, it is mandatory for this file to exist (with that\nspecific name), although that could change or be customizable later.\n\nThe contents are actually not important but here's a starting point:\n\n```\n\"use strict\";\n\nimport {App} from \"core/app\";\n// bootstrap your app\n```\n\n#### styles/main.scss\nThe main.scss file is where you should load all the stylesheets scattered around in your application.\n\nHere's an example of a main.scss:\n```\n//\n// Main stylesheet.\n// Should import all the other stylesheets\n//\n\n// Variables, functions, mixins and utils\n@import \"base/variables\";\n@import \"base/functions\";\n@import \"base/mixins\";\n@import \"base/utils\";\n\n// Base/generic style rules\n@import \"base/reset\";\n@import \"base/responsive\";\n@import \"base/fonts\";\n@import \"base/typography\";\n@import \"base/base\";\n\n// Layout\n@import \"layout/layout\";\n@import \"layout/theme\";\n@import \"layout/print\";\n\n// Components\n@import \"../components/posts/posts\";\n\n// Pages\n@import \"../pages/home/home\";\n```\n\nIn the example above, you can see that in the main.scss file, we import many other stylesheets (sass partials).\n\nHere's another example, this time for vendor.scss:\n```\n//\n// Includes/imports all third-party stylesheets used throughout the application.\n// Should be loaded before the application stylesheets\n//\n\n// Nicolas Gallagher's Normalize.css\n@import '../../jspm_packages/github/necolas/normalize.css@3.0.3/normalize.css'; // the path refers to the file at BUILD time\n```\n\nAs you can see above, a third-party stylesheet is imported.\n\n\n### index.html\nThe index.html file is the entrypoint of your application. It is not mandatory per se, but when you run `npm run serve`,\nit'll be opened. Also, the `html` build task will try and replace/inject content in it.\n\nHere's the minimal required contents for index.html (required for production builds with minification and bundling):\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"utf-8\">\n\t...\n\t<!-- Stylesheets -->\n\t<!-- build:css-vendor -->\n\t<link rel=\"stylesheet\" href=\"styles/vendor.css\">\n\t<!-- endbuild -->\n\t<!-- build:css-bundle -->\n\t<link rel=\"stylesheet\" href=\"styles/main.css\">\n\t<!-- endbuild -->\n</head>\n<body>\n\n\t<!-- build:js-app -->\n\t<!-- for production, this is all replaced by a minified bundle -->\n\t<script src=\"jspm_packages/system.src.js\"></script>\n\t<script src=\"jspm.conf.js\"></script>\n\t<script>\n\t\tSystem.import('core/core.bootstrap').catch(console.error.bind(console));\n\t</script>\n\t<!-- endbuild -->\n</body>\n</html>\n```\n\nIn the above, the most important parts are:\n* for production, the contents of `<!-- build:css-vendor --> ... <!-- endbuild -->` will be replaced by the vendor bundle created by the build\n* for production, the contents of `<!-- build:css-bundle --> ... <!-- endbuild -->` will be replaced by the application's CSS bundle created by the build\n* for production, the contents of `<!-- build:js-app --> ... <!-- endbuild -->` will be replaced by the application's JS bundle created by the build\n\nAlso, note that during development, SystemJS is loaded (system.src.js), the JSPM configuration is loaded (jspm.conf.js)\nand SystemJS is used to load the entrypoint of the application (core/core.bootstrap).\n\n## Commands\nOnce you have added this build system to your project, you can list all the available commands using `gulp help`.\nThe command will give you a description of each task. The most important to start discovering are:\n* `gulp serve`: start a Web server with live reload, watching files, transpiling, generating sourcemaps, etc\n* `gulp serve-dist`: same with the production version\n* `gulp clean`\n* `gulp ts-lint`: check TypeScript code quality/style\n* `gulp check-js-quality`: check JavaScript code quality\n* `gulp check-js-style`: check JavaScript code style\n* `gulp prepare-test-unit`: clean, compile and check quality/style\n* `gulp test-unit`: run unit tests using Karma (prereq: `gulp prepare-test-unit`\n\nYou can run the `gulp -T` command get an visual idea of the links between the different tasks.\n\n## Scripts\nTo make your life easier, you can add the following scripts to your package.json file. Note that if you have used the\ngenerator to create your project, you normally have these already:\n\n```\n  \"scripts\": {\n    \"tsc\": \"tsc\",\n    \"typings\": \"typings\",\n    \"clean\": \"gulp clean\",\n    \"compile\": \"gulp\",\n    \"build\": \"npm run compile && npm run test\",\n    \"test\": \"gulp prepare-test-unit && gulp test-unit\",\n    \"start\": \"npm run serve\",\n    \"serve\": \"nodemon --watch gulpfile.js --watch gulpfile.babel.js --watch package.json --watch .jshintrc --watch .jscsrc --watch tsconfig.json --watch tslint.json --watch jspm.conf.js --exec gulp serve\",\n    \"serve-dist\": \"nodemon --watch gulpfile.js --watch gulpfile.babel.js --watch package.json --watch .jshintrc --watch .jscsrc --watch tsconfig.json --watch tslint.json --watch jspm.conf.js --exec gulp serve-dist\",\n    \"update\": \"npm install --no-optional && jspm update && jspm dl-loader && npm run typings-install\",\n    \"outdated\": \"npm outdated\",\n    \"help\": \"gulp help\",\n    \"typings-install\": \"typings install\",\n    \"setup\": \"npm install --no-optional && jspm install && jspm dl-loader && npm run typings-install\"\n  }\n```\n\n## Options\nThe build can be customized by passing options.\nDefining options is done as in the following example gulpfile.babel.js:\n\n```\n\"use strict\";\n\nimport gulp from \"gulp\";\n\nimport build from \"node-build-web-app\";\n\nlet options = {};\n\noptions.distEntryPoint = \"core/core.bootstrap\";\n```\n\nAvailable options:\n* distEntryPoint\n  * must be a relative path from .tmp/ to the file to use as entry point for creating the production JS bundle. The\n   extension does not need to be specified (SystemJS is used to load the file)\n  * by default, the following file is used: `core/boot.js`\n* minifyProductionJSBundle (default: true)\n  * by default, the production JS bundle is minified\n  * you can disable it by setting this option to false\n* mangleProductionJSBundle (default: true)\n  * by default, the production JS bundle is mangled\n  * you can disable it by setting this option to false\n* useJSPM (default: true)\n  * by default, the production JS bundle is created using the JSPM API, which requires jspm configuration in your package.json\n  * you can disable JSPM by setting this option to false\n\t* if you disable the usage of JSPM, then the SystemJS builder API will be used to create the production JS bundle: https://www.npmjs.com/package/systemjs-builder\n* systemjsConfigurationFile (default: jspm.conf.js)\n  * by default, if you disable JSPM usage by the build, it will expect to find 'jspm.conf.js' as your SystemJS configuration file\n  * you can define this option to customize the file name\n* minifyProductionHTML (default: true)\n  * by default, the production HTML is minified\n  * you can disable it by setting this option to false\n* browserSync\n\t* Pass in browserSync options. See http://www.browsersync.io/docs/options/\n\t* this should be defined like this: \"browserSync\": { // BrowserSync options }\n\n## FAQ\n\n### How can I inline some script in the production version of some HTML page?\n* add `inline <path to the JS file>` right above the script tag that you want to have inlined; this tells the\n  gulp-inline-source plugin where to find the resource that should be inlined\n* add the `inline` attribute to the script tag itself: ```<script inline src=\"...\"></script>```\n\nExample:\n```\n<!-- inline ../node_modules/angular2/bundles/angular2-polyfills.js -->\n<script inline src=\"node_modules/angular2/bundles/angular2-polyfills.js\"></script>\n```\n\nNote that the path specified in the `<!-- inline ...` comment is relative to the root of your project and NOT to the html file\n\nCheck out [gulp-inline-source](https://www.npmjs.com/package/gulp-inline-source)'s documentation for more details.\n\n## Build dependencies\n* gulp: build system (https://www.npmjs.com/package/gulp)\n* babel: ES2015 to ES5 transpiler; used for the gulp build\n* typescript: the typescript tools (compiler, ...)\n* systemjs-builder: build tool for systemjs allows to create a single-file build of mixed-dependency module trees: https://www.npmjs.com/package/systemjs-builder\n* browser-sync: live reloading & browser syncing: https://www.npmjs.com/package/browser-sync\n* del: deletes files/folders: https://www.npmjs.com/package/del\n* gulp-autoprefixer: automatically adds vendor prefixes to CSS: https://www.npmjs.com/package/gulp-autoprefixer\n* gulp-cache: temp file based caching proxy task for gulp: https://www.npmjs.com/package/gulp-cache\n* gulp-changed: only pass through changed files: https://www.npmjs.com/package/gulp-changed\n* gulp-csso: minify CSS with CSS optimizer: https://www.npmjs.com/package/gulp-csso\n* gulp-flatten: remove or replace relative path for files: https://www.npmjs.com/package/gulp-flatten\n* gulp-if: conditionally run a task: https://www.npmjs.com/package/gulp-if\n* gulp-imagemin: minify png, jpeg, gif and svg images: https://www.npmjs.com/package/gulp-imagemin\n* gulp-inline-source: inline scripts & stylesheets: https://www.npmjs.com/package/gulp-inline-source\n* gulp-jshint: JavaScript code quality checker plugin for gulp that uses JSHint: https://www.npmjs.com/package/gulp-jshint\n* gulp-minify-html: minify html with minimize: https://www.npmjs.com/package/gulp-minify-html\n* gulp-minify-css: minify css with clean-css: https://www.npmjs.com/package/gulp-minify-css\n* gulp-replace: string replace plugin for gulp: https://www.npmjs.com/package/gulp-replace\n* gulp-sass: sass plugin for gulp: https://www.npmjs.com/package/sass\n* node-sass: used by gulp-sass and normally not needed but added to fix an issue with sourcemaps: https://github.com/sindresorhus/gulp-autoprefixer/issues/10\n* gulp-size: display the size of the project: https://www.npmjs.com/package/gulp-size\n* gulp-sourcemaps: js source map support for gulp: https://www.npmjs.com/package/gulp-sourcemaps\n* gulp-uglify: minify files using Uglify JS: https://www.npmjs.com/package/gulp-uglify\n* gulp-uncss: remove unused CSS selectors: https://www.npmjs.com/package/gulp-uncss\n* gulp-util: utility methods for gulp: https://www.npmjs.com/package/gulp-util\n* gulp-plumber: prevent pipe breaking caused by errors from gulp plugins: https://www.npmjs.com/package/gulp-plumber\n* gulp-notify: display notifications on OSX, Linux and Windows (native). Fallsback to Growl or simply logging: https://www.npmjs.com/package/gulp-notify\n* gulp-help: create a list of gulp tasks with documentation: https://www.npmjs.com/package/gulp-help/\n* gulp-html-replace: replace build blocks in HTML: https://www.npmjs.com/package/gulp-html-replace\n* gulp-strip-debug: remove console and debugger statements from JS code: https://www.npmjs.com/package/gulp-strip-debug\n* gulp-concat: concatenate files: https://www.npmjs.com/package/gulp-concat\n* gulp-rename: rename files: https://www.npmjs.com/package/gulp-rename\n* gulp-debug: useful to verify the stream contents: https://www.npmjs.com/package/gulp-debug\n* gulp-cssimport: replace CSS imports by stylesheet contents: https://www.npmjs.com/package/gulp-cssimport\n* gulp-nice-package: validate npm's package.json file: https://www.npmjs.com/package/gulp-nice-package/\n* gulp-inject: JavaScript, stylesheet and webcomponent injection: https://www.npmjs.com/package/gulp-inject\n* gulp-tslint: Linter for TypeScript code: https://www.npmjs.com/package/gulp-tslint\n* gulp-typescript: TypeScript transpiler plugin for gulp: https://www.npmjs.com/package/gulp-typescript\n* gulp-babel: ES2015 to ES5 transpiler plugin for gulp: https://www.npmjs.com/package/gulp-babel\n* gulp-jscs: JavaScript code style checker plugin for gulp: https://www.npmjs.com/package/gulp-jscs\n* gulp-jscs-stylish: Stylish reporter for gulp-jscs: https://www.npmjs.com/package/gulp-jscs-stylish\n* gulp-sass-lint: Lint SASS files: https://www.npmjs.com/package/gulp-sass-lint\n* jshint-stylish: stylish reporter for JSHint: https://www.npmjs.com/package/jshint-stylish\n* opn: open stuff like websites, files, executables (cross-platform): https://www.npmjs.com/package/opn\n* require-dir: helper to require() directories: https://www.npmjs.com/package/require-dir\n* run-sequence: run a series of dependent gulp tasks in order: https://www.npmjs.com/package/run-sequence\n* event-stream: construct pipes of streams of events: https://www.npmjs.com/package/event-stream\n* connect-history-api-fallback: useful to automatically redirect all non-existent directories to the index file; required for SPAs: https://www.npmjs.com/package/connect-history-api-fallback\n* karma: unit test runner: https://www.npmjs.com/package/karma\n* http-proxy-middleware: Middleware to send requests to proxy API server: https://www.npmjs.com/package/http-proxy-middleware\n\n## Contributing\n* Fork the project\n* Create a feature branch in your fork\n* Rebase if needed to keep the project history clean\n* Commit your changes & push to GitHub\n* Try and flood me with pull requests :)\n\n## Building from source\nIf you want to build from source, you need to:\n* install NodeJS and npm\n* install gulp: `npm install --global gulp`\n* clone this git repository\n* run `npm run setup`\n* run `npm run build`\n* start hacking :)\n\nTo clean, you can run `npm run clean`\n\n## Project configuration files\nThe project includes multiple configuration files. Here's some information about these:\n* gulpfile.babel.js: gulp's configuration file. This is where the build magic happens (more information: http://gulpjs.com/)\n* package.json: NPM's configuration file. This is where all dependencies are defined (more information: https://docs.npmjs.com/files/package.json)\n* npm-shrinkwrap.json: file created using npm shrinkwrap. Blocks dependency versions (including transitive ones), needed for build stability\n\n## Release Process\n* commit all changes to include in the release\n* edit the version in package.json\n  * respect semver\n* update CHANGELOG.MD\n* commit\n* git tag <version>\n* git push --tags\n* draft the release on GitHub (add description, etc)\n* npm publish\n\n## Authors\n### Mark Small\n* [@GitHub](https://github.com/marksmall)\n\n## License\nThis project and all associated source code is licensed under the terms of the [MIT License](https://en.wikipedia.org/wiki/MIT_License).\n",
  "readmeFilename": "README.md",
  "_id": "node-build-web-app@0.6.9",
  "dist": {
    "shasum": "7a2710f548e16cccb7ffa17b866a5d0a0556529e"
  },
  "_from": "node-build-web-app@",
  "_resolved": "https://registry.npmjs.org/node-build-web-app/-/node-build-web-app-0.6.9.tgz"
}
