{
  "name": "gulp-nice-package",
  "version": "1.1.0",
  "description": "Opinionated package.json validator",
  "main": "index.js",
  "scripts": {
    "test": "mocha"
  },
  "author": {
    "name": "Chris Montgomery",
    "email": "chr.montgomery@gmail.com",
    "url": "http://www.chrismontgomery.info/"
  },
  "license": "MIT",
  "dependencies": {
    "gulp-util": "^3.0.4",
    "object-assign": "^4.0.1",
    "package-json-validator": "^0.6.1",
    "through2": "^2.0.0"
  },
  "devDependencies": {
    "mocha": "^2.2.1"
  },
  "keywords": [
    "gulp",
    "gulpfriendly",
    "package.json",
    "validate",
    "validator"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/chmontgomery/gulp-nice-package"
  },
  "readme": "# [gulp](http://gulpjs.com/)-nice-package [![NPM version][npm-image]][npm-url] [![Build Status][travis-image]][travis-url]\n\n> Opinionated package.json validator. Uses [package.json-validator](https://github.com/gorillamania/package.json-validator) under the covers\n\n![](screenshot.png)\n\n## Install\n\n```shell\nnpm install gulp-nice-package --save-dev\n```\n\n## Usage\n\n```js\n// gulpfile.js\nvar gulp = require('gulp');\nvar validate = require('gulp-nice-package');\n\ngulp.task('validate-json', function () {\n  return gulp.src('package.json')\n    .pipe(validate());\n});\n```\n\n## Options\n\nAny options defined are simply passed along to \n[package.json-validator](https://github.com/gorillamania/package.json-validator#api)\n\n```js\n// gulpfile.js\nvar gulp = require('gulp');\nvar validate = require('gulp-nice-package');\n\ngulp.task('validate-json', function () {\n  return gulp.src('package.json')\n    .pipe(validate('npm', {\n      warnings: false,\n      recommendations: false\n    }));\n});\n```\n\n## Failing your build\n\nThe below will both print errors to the console and exit the gulp process with an appropriate error code for\nproperly failing builds.\n\n```js\nvar gulp = require('gulp'),\n  validate = require('gulp-nice-package'),\n  mapstream = require('map-stream');\n\nprocess.on('exit', function () {\n  process.nextTick(function () {\n    process.exit(1);\n  });\n});\n\ngulp.task('validate-json', function () {\n  var isValid = true;\n  return gulp.src('package.json')\n    .pipe(validate())\n    .pipe(mapstream(function (file, cb) {\n      isValid = file.nicePackage.valid;\n      cb(null, file);\n    }))\n    .on('end', function() {\n      if (!isValid) {\n        process.emit('exit');\n      }\n    });\n});\n```\n\nI know, it seems a bit terse. The reasoning is, you may want to pipe other transforms onto the stream and, if an\nerror is thrown, the pipe will cease and you have no way to continue. A valid use case may be to actually fix the\nthe package.json file programmatically if it's invalid, e.g. with [gulp-shrinkwrap](https://github.com/chmontgomery/gulp-shrinkwrap).\n\n## License\n\n[MIT](http://opensource.org/licenses/MIT) Â© [Chris Montgomery](http://www.chrismontgomery.info/)\n\n[npm-url]: https://npmjs.org/package/gulp-nice-package\n[npm-image]: http://img.shields.io/npm/v/gulp-nice-package.svg\n[travis-image]: https://travis-ci.org/chmontgomery/gulp-nice-package.svg?branch=master\n[travis-url]: https://travis-ci.org/chmontgomery/gulp-nice-package",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/chmontgomery/gulp-nice-package/issues"
  },
  "_id": "gulp-nice-package@1.1.0",
  "dist": {
    "shasum": "85cca4ff4f02a36a2052af55c19257c386271664"
  },
  "_from": "gulp-nice-package@1.1.x",
  "_resolved": "https://registry.npmjs.org/gulp-nice-package/-/gulp-nice-package-1.1.0.tgz"
}
